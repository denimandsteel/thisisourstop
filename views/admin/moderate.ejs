<h1>Moderate</h1>
<div id="admin">
  <div id="map"></div>
  <table>
    <thead>
      <tr>
        <td class="time">Time</td>
        <td class="comment">Comment</td>
        <td class="categories">Categories</td>
        <td class="actions">Actions</td>
      </tr>
    </thead>
    <tbody>
      <% for(var i = 0; i < comments.length; i++) { %>
      <tr class="comment">
        <td class="time"><%=: comments[i].time | time %></td>
        <td class="comment"><%= comments[i].comment %></td>
        <td class="categories">
        <% if (typeof comments[i].type !== 'undefined') { %>
          <% for(var j = 0; j < comments[i].type.length; j++) { %>
            <div class="icon <%= comments[i].type[j] %>"></div>
          <% } %>
        <% } %>
        </td>
        <td class="actions"><a href="/stop/<%= comments[i].stop %>#comment-<%= comments[i].cid %>">view</a><a href="#">delete</a><a href="#">block</a></td>
      </tr>
      <% } %>
    </tbody>
  </table>
</div>
<script src="/socket.io/socket.io.js"></script>
<script src="/modestmaps.min.js"></script>
<script src="/ejs.min.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.0/jquery.min.js"></script>
<script id="comment-template" type="text/template">
<tr class="comment new">
  <td class="time">{{=: comment.time | time }}</td>
  <td class="comment">{{= comment.comment }}</td>
  <td class="categories">
  {{ if (typeof comment.type !== 'undefined') { }}
    {{ for(var j = 0; j < comment.type.length; j++) { }}
      <div class="icon {{= comment.type[j] }}"></div>
    {{ } }}
  {{ } }}
  </td>
  <td class="actions"><a href="/stop/{{= comment.stop }}#comment-{{= comment.cid }}">view</a><a href="#">delete</a><a href="#">block</a></td>
</tr>
</script>
<script>
  // name of a div element:

  var provider = new MM.TemplatedMapProvider('http://tile.openstreetmap.org/{Z}/{X}/{Y}.png');
  var map = new MM.Map('map', provider, new MM.Point(500, 250));
  map.setCenterZoom(new MM.Location(49.24717051903947, -123.09061148388665), 11);

  /*
   * Based on John Resig's Pretty Date: http://ejohn.org/blog/javascript-pretty-date/
   * Licensed under the MIT and GPL licenses.
   *
   * Takes an ISO time and returns a string representing how
   * long ago the date represents.
   */
  function prettyDate(time) {
    var date = new Date(time),
        diff = (((new Date()).getTime() - date.getTime()) / 1000),
        day_diff = Math.floor(diff / 86400);

    if ( isNaN(day_diff) || day_diff < 0 || day_diff >= 31 )
      return;

    return day_diff == 0 && (
        diff < 60 && "Just now" ||
        diff < 120 && "1 minute ago" ||
        diff < 3600 && Math.floor( diff / 60 ) + " minutes ago" ||
        diff < 7200 && "1 hour ago" ||
        diff < 86400 && Math.floor( diff / 3600 ) + " hours ago") ||
      day_diff == 1 && "Yesterday" ||
      day_diff < 7 && day_diff + " days ago" ||
      day_diff < 31 && Math.ceil( day_diff / 7 ) + " weeks ago";
  };

  var ejs = require('ejs');
  ejs.open = '{{';
  ejs.close = '}}';
  ejs.filters.time = function(milliseconds) {
    return prettyDate(milliseconds);
  };
  var commentTemplate = ejs.compile($('#comment-template').html());

  var socket = io.connect();
  socket.on('comment', function(data) { console.log(data); });
  socket.on('comment', function (data) {
    var comment = data.comment;
    var newComment = $(commentTemplate({ comment: comment, new_comment: true })).hide();
    //$('.actions a', newComment).click(actionsHandler);
    $('#admin table tbody').prepend(newComment);
    newComment.slideDown();
  });
  </script>
